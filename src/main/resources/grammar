// handle `list`
Keyword :: one of
  `and` `as` `assert` `await` `constraint` `else` `exception` `external` `false` `for` `if` `in` `include` `lazy` `let` `list{` `module` `mutable` `of` `open` `private` `rec` `switch` `true` `try` `type` `when` `while`

Letter ::
  Lletter
  Uletter

Semicolon ::
  `;`

Lletter :: one of
  `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`

Uletter :: one of
  `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`

DecimalDigit :: one of
  `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

DecimalDigits ::
  DecimalDigit
  DecimalDigits DecimalDigit
  DecimalDigits `_`

HexDigit :: one of
  `0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `a` `b` `c` `d` `e` `f` `A` `B` `C` `D` `E` `F`

HexDigits ::
  HexDigit
  HexDigits HexDigit
  HexDigits `_`

Lident ::
  LidentName but not Keyword

LidentName ::
  LidentFirst
  LidentName IdentRest

LidentFirst ::
  Lletter
  `_`

Uident ::
  UidentName

UidentName ::
  UidentFirst
  UidentName IdentRest

UidentFirst ::
  Uletter

IdentRest ::
  Letter
  DecimalDigit
  `_`
  `'`

Integer[Suffix] ::
  IntegerLiteral
  [+Suffix] IntegerLiteral suffix

Float[Suffix] ::
  FloatLiteral
  [+Suffix] FloatLiteral suffix

// This is from JavaScript String
String ::
  `"` StringCharacters? `"`

StringCharacters ::
  StringCharacter StringCharacters?

StringCharacter ::
  SourceCharacter but not `"` `\` LineTerminator
  `\` EscapeSequence

EscapeSequence ::
  CharacterEscapeSequence
  `0` [lookahead <! {DecimalDigit}]
  HexEscapeSequence
  UnicodeEscapeSequence

CharacterEscapeSequence ::
  SingleEscapeCharacter
  NonEscapeCharacter

EscapeCharacter ::
  SingleEscapeCharacter
  DecimalDigit
  `x`
  `u`

SingleEscapeCharacter :: one of
  `'` `"` `\` `b` `n` `r` `t`

NonEscapeCharacter ::
  SourceCharacter but not EscapeCharacter LineTerminator

LineContinuation ::
  `\` LineTerminatorSequence

HexEscapeSequence ::
  `x` HexDigit HexDigit

Hex4Digits ::
  HexDigit HexDigit HexDigit HexDigit

UnicodeEscapeSequence ::
  `u` Hex4Digits

SourceCharacter ::
  > any Unicode code point

LineTerminator ::
  <LF>
  <CR>
  <LS>
  <PS>

IntegerLiteral ::
  NonHexIntegerLiteral
  HexIntegerLiteral

NonHexIntegerLiteral ::
  DecimalLiteral
  BinaryIntegerLiteral
  OctalIntegerLiteral

FloatLiteral ::
  NonHexIntegerLiteral DecimalFractional
  NonHexIntegerLiteral DecimalExponent
  NonHexIntegerLiteral DecimalFractional DecimalExponent
  HexIntegerLiteral HexFractional
  HexIntegerLiteral HexExponent
  HexIntegerLiteral HexFractional HexExponent

DecimalFractional ::
  `.` DecimalDigits

HexFractional ::
  `.` HexDigits

DecimalExponent ::
  ExponentChar DecimalDigits
  ExponentChar `+` DecimalDigits
  ExponentChar `-` DecimalDigits

HexExponent ::
  ExponentChar HexDigits
  ExponentChar `+` HexDigits
  ExponentChar `-` HexDigits

ExponentChar :: one of
  `e` `E` `p` `P`

DecimalLiteral ::
  DecimalDigits

BinaryIntegerLiteral ::
  `0b` DecimalDigits
  `0B` DecimalDigits

OctalIntegerLiteral ::
  `0o` DecimalDigits
  `0O` DecimalDigits

HexIntegerLiteral ::
  `0x` HexDigits
  `0X` HexDigits

Suffix :: one of
  `g` `h` `i` `j` `k` `l` `m` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`

Specifications :
  [empty]
  Specification Specifications
  Specification Semicolon Specifications

Implementations :
  [empty]
  Implementation Implementations
  Implementation Semicolon Implementations

Specification :
  SignLetDescription
  TypeDefinition
  TypeExtension
  External
  ExceptionDefinition
  OpenDescription
  IncludeModuleType
  ModuleSpecification
  StandaloneAttribute
  ExtensionModuleLevel
  Attribute Specification

NonRecFlag ::
  `nonrec`

TypeDefinition :
  `type` `rec` TypeDefs
  `type` NonRecFlag? TypeDefs

TypeDefs :
  TypeDef TypeDefRest?

TypeDefRest :
  `and` TypeDefs
  Attribute TypeDefRest

TypeDef :
  TypeConstrName AngleBraketTypeParams? TypeInformation?

TypeInformation :
  `=` TypeEquationAndRepresentation[+Private]
  TypeInformation TypeConstraints

TypeConstraints :
  TypeConstraint
  TypeConstraint TypeConstraints

TypeEquationAndRepresentation[Private] :
  TypeEquationOrConstrDecl
  RecordOrObjectDecl
  TypeRepresentation[~Private]
  TypeExpression[+Es6Arrow, +Alias]
  [+Private] TypeExpression[+Es6Arrow, +Alias] `=` TypeRepresentation[+Private]
  [+Private]`private` TypeEquationAndRepresentation[~Private]

TypeConstrName :
  Lident

TypeConstraint :
  `constraint` TypeLVar `=` TypeExpression[+Es6Arrow, +Alias]

//TODO
Implementation :
  OpenDescription
  LetBindings
  TypeDefinition
  TypeExtension
  External
  ExceptionDefinition
  ModuleOrModuleTypeImplOrPackExpression
  StandaloneAttribute
  ExtensionModuleLevel
  Expr[~TTB, ~When]
  Attribute Implementation

Expr[TTB, When] :
  OperandExpr[?TTB, ?When]
  OperandExpr[?TTB, ?When] BinaryExpr[?TTB, ?When]
  OperandExpr[?TTB, ?When] TernaryExpr
  OperandExpr[?TTB, ?When] BinaryExpr[?TTB, ?When] TernaryExpr

OperandExpr[TTB, When] :
  `assert` UnaryExpr
  `lazy` UnaryExpr
  TryExpr
  IfOrIfLetExpr
  ForExpr
  SwitchExpr
  [~When] Es6ArrowExpr[?TTB, ?When]
  UnaryExpr
  [+TTB] AsyncArrowExpr
  Attribute OperandExpr[?TTB, ?When]
  //WhileExpr
  //AwaitExpr

AsyncArrowExpr :
  `async` Es6ArrowExpr[~TTB, ~When]

UnaryExpr :
  AtomicExpr
  AtomicExpr [no LineTerminator here] PrimaryExpr[~NoCall]
  `-` UnaryExpr
  `-.` UnaryExpr
  `+` UnaryExpr
  `+.` UnaryExpr
  `!` UnaryExpr

InfixOperator :: one of
  `#=`  `:=`  `||`  `&&`  `=`  `==`  `===`  `<`  `>`  `!=`  `!=`  `!==`  `<=`  `>=`  `|>`  `+`  `+.`  `-.`  `-.`  `++`  `*`  `*.`  `/`  `/.`  `**`  `->`  `.`

BinaryExpr[TTB, When] :
  InfixOperator OperandExpr[?TTB, ?When]

TernaryExpr :
  `?` Expr[+TTB, ~When] `:` Expr[~TTB, ~When]

AtomicExpr :
  `true`
  `false`
  Constant
  `(``)`
  `list{` ListExpr
  ValueOrConstructor
  `(` ConstrainedOrCoercedExpr `)`
  `(` ConstrainedOrCoercedExpr Comma TupleExpr `)`
  `module` FirstClassModuleExpr
  ArrayExpr
  BracedOrRecordExpr
  Jsx
  Extension
  //<TemplateExpression>
  //<PolyVariantExpression>

BracedOrRecordExpr :
  `{` SpreadExpr `,` RecordExpr `}`
  `{` String PrimaryExpr[~NoCall]? BinaryExpr[~TTB, ~When]? TernaryExpr? `}`
  `{` String  PrimaryExpr[~NoCall]? BinaryExpr[~TTB, ~When]? TernaryExpr? Semicolon? ExprBlock `}`
  `{` String `:` Expr[~TTB, ~When] Comma? RecordExprWithStringKeys? `}`
  `{` String `:` Expr[~TTB, ~When] Comma? RecordExprWithStringKeys? `}`
  `{` ValueOrConstructor Comma RecordExpr`}`
  `{` ValueOrConstructor `:` OptionalLabel? Expr[~TTB, ~When] `}`
  `{` ValueOrConstructor `:` OptionalLabel? Expr[~TTB, ~When] Comma RecordExpr `}`
  `{` ValueOrConstructor Semicolon ExprBlock`}`
  `{` ValueOrConstructor `=>` Es6ArrowExpr[~TTB, ~When] BinaryExpr[~TTB, ~When]? TernaryExpr? `}`
  `{` ValueOrConstructor `=>` Es6ArrowExpr[~TTB, ~When] BinaryExpr[~TTB, ~When]? TernaryExpr? Semicolon? ExprBlock `}`
  `{` ValueOrConstructor PrimaryExpr[~NoCall] BinaryExpr[~TTB, ~When]? TernaryExpr? `}`
  `{` ValueOrConstructor PrimaryExpr[~NoCall] BinaryExpr[~TTB, ~When]? TernaryExpr? Semicolon? ExprBlock `}`
  `{` ExprBlock `}`
  `{` OptionalLabel RecordExpr `}`
  `{` AsyncArrowExpr ExprBlock`}`

Jsx :
  `<` JsxOpeningOrSelfClosingElement
  `<` JsxName
  `<` JsxFragment

JsxOpeningOrSelfClosingElement :
  JsxName Children
  JsxName JsxProps Children

JsxName :
  ModuleOrValuePath

JsxProps :
  [empty]
  JsxProp
  JsxProp JsxProps

JsxProp :
  OptionalLabel? Lident
  Lident `=` OptionalLabel? JsxExpr
  `{` `...` JsxExpr `}`

JsxExpr :
  AtomicExpr
  AtomicExpr PrimaryExpr[~NoCall]

Children :
  `/` `>`
  `>` `<` `/` JsxName `>`
  `>` JsxChildren `<` `/` JsxName `>`

JsxChildren :
  JsxChildList
  JsxChildList `<` `/`
  `...` AtomicExpr PrimaryExpr[+NoCall]?

JsxChildList :
  JsxChild
  JsxChildList JsxChild

JsxChild :
  AtomicExpr
  AtomicExpr PrimaryExpr[+NoCall]
  `<` AtomicExpr 
  `<` AtomicExpr PrimaryExpr[+NoCall]

JsxFragment :
  `>` JsxChildren? `<` `/` `>`

ArrayExpr :
  `[` `]`
  `[` ConstrainedExprs`]`

SpreadExpr :
  `...` ConstrainedOrCoercedExpr

ListExpr :
  `}`
  ConstrainedOrCoercedExprs `}`
  ConstrainedOrCoercedExprs SpreadExpr `}`

RecordExprWithStringKeys :
  RecordExprRowWithStringKey Comma?
  RecordExprRowWithStringKey Comma RecordExprWithStringKeys

RecordExprRowWithStringKey :
  String
  String `:` Expr[~TTB, ~When]

RecordExpr :
  [empty]
  RecordExprRow
  RecordExprRow Comma
  RecordExprRow Comma RecordExpr

//TODO
RecordExprRow :
  ValuePath
  ValuePath `:` OptionalLabel? Expr[~TTB, ~When]
  Attribute RecordExprRow

Es6ArrowExpr[TTB, When] :
  Parameters ReturnType? `=>` Expr[?TTB, ?When]

ReturnType :
  `:` TypeExpression[~Es6Arrow, +Alias] 
  
Parameters :
  Lident
  `_`
  `(` `)`
  `(` `.` `)`
  `(` CurriedOrNotParameterList `)`

CurriedOrNotParameterList :
  CurriedOrNotParameter Comma?
  CurriedOrNotParameter Comma CurriedOrNotParameterList

CurriedOrNotParameter :
  Parameter
  `.` Parameter

LabelledLident :
  `~` Lident

//Lookahead Comma Equal Rparen
Parameter :
  `type` LidentList ParameterRest?
  LabelledLident
  LabelledLident `:` TypeExpression[+Es6Arrow, +Alias]
  LabelledLident `as` ConstrainedPattern
  ConstrainedPattern ParameterRest?
  Attribute Parameter

ParameterRest :
  `=` `?`
  `=` ConstrainedOrCoercedExpr

IfOrIfLetExpr :
  `if` IfExpr

IfExpr :
  IfCondition ThenBranch 
  IfCondition ThenBranch `else` IfOrIfLetExpr
  IfCondition ThenBranch `else` ElseBranch

IfCondition :
  Expr[~TTB, ~When]

ThenBranch :
  `{` ExprBlock `}`

ElseBranch :
  `{` ExprBlock `}`

ForExpr :
  `for` Pattern[+Alias, +Or] ForRest `{` ExprBlock `}`
  `for` `(` Pattern[+Alias, +Or] ForRest `)` `{` ExprBlock `}`

ForRest :
  `in` Expr[~TTB, ~When] ForRestDirection Expr[~TTB, +When]

ForRestDirection :
  `to`
  `downto`

SwitchExpr :
  `switch` Expr[~TTB, +When] `{` PatternMatching `}`

ConstrainedOrCoercedExpr :
  ConstrainedExpr
  ConstrainedExpr `:>` CoercedExpr

TupleExpr :
  ConstrainedExprs

CoercedExpr :
  TypeExpression[+Es6Arrow, +Alias]

ValueOrConstructor :
  ModuleOrValuePath
  ModulePath [no LineTerminator here] ConstructorArgs

ConstructorArgs :
  `(` `)`
  `(` ConstrainedExprs `)`

ConstrainedExprs :
  ConstrainedExpr Comma?
  ConstrainedExpr Comma ConstrainedExprs

ConstrainedOrCoercedExprs :
  ConstrainedOrCoercedExpr Comma?
  ConstrainedOrCoercedExpr Comma ConstrainedOrCoercedExprs

ConstrainedExpr :
  Expr[~TTB, ~When]
  Expr[~TTB, ~When] `:` TypeExpression[+Es6Arrow, +Alias]

//TODO : No need LineTerminator for PrimaryExpr0 
PrimaryExpr[NoCall] :
  PrimaryExprElem[?NoCall]
  PrimaryExpr[?NoCall] PrimaryExprElem[?NoCall]

PrimaryExprElem[NoCall] :
  `.` ValuePath
  [~NoCall]`.` ValuePath `=` Expr[~TTB, ~When]
  [~NoCall] BracketAccess
  [~NoCall] CallExpr
  //<TemplateExpression>

BracketAccess :
  `[` String `]`
  `[` String `]` [no LineTerminator here] PrimaryExpr[~NoCall]
  `[` String `]` `=` Expr[~TTB, ~When]
  `[` String `]` [no LineTerminator here] PrimaryExpr[~NoCall] `=` Expr[~TTB, ~When]
  `[` ConstrainedOrCoercedExpr `]`
  `[` ConstrainedOrCoercedExpr `]` [no LineTerminator here] PrimaryExpr[~NoCall]
  `[` ConstrainedOrCoercedExpr `]` `=` Expr[~TTB, ~When]

TryExpr :
  `try` Expr[~TTB, +When] `catch` `{` PatternMatching `}`

CallExpr :
  `(``)`
  `(` Arguments `)`

Arguments :
  Argument
  Argument Comma
  Argument Comma Arguments

Argument :
  ArgumentItem
  `.` ArgumentItem

ArgumentItem :
  ConstrainedOrCoercedOrUnderScore
  LabelledLident
  LabelledLident `?`
  LabelledLident `=` ConstrainedOrCoercedOrUnderScore
  LabelledLident `=` `?` ConstrainedOrCoercedOrUnderScore
  LabelledLident `:` TypeExpression[+Es6Arrow, +Alias]

ConstrainedOrCoercedOrUnderScore :
  `_`
  ConstrainedOrCoercedExpr
  
PatternMatching :
  PatternMatchCase
  PatternMatchCase PatternMatching

PatternMatchCase :
  `|` Pattern[+Alias, +Or] PatternGuard? `=>` ExprBlock

PatternGuard :
  `when` Expr[~TTB, +When]
  `if` Expr[~TTB, +When]

ExprBlock :
  [empty]
  ExprBlockItem
  ExprBlockItem `:>` CoercedExpr

ExprBlockItem :
  `module` Uident ModuleBindingBody Semicolon? ExprBlock
  `module` FirstClassModuleExpr [no LineTerminator here] PrimaryExpr[~NoCall]? BinaryExpr[~TTB, ~When]? TernaryExpr?
  ExceptionDefinition Semicolon? ExprBlock
  OpenDescription Semicolon? ExprBlock
  LetBindings Semicolon? ExprBlock
  Expr[~TTB, ~When]
  Expr[~TTB, ~When] Semicolon? ExprBlock

ModuleBindingBody :
  `=` ModuleExpr
  `:` ModuleType[+Es6Arrow, +With] `=` ModuleExpr

LetBindings:
  `let` LetBindingBody
  `let` `rec` LetBindingBody
  LetBindings `and` LetBindingBody
  LetBindings `and` `let` LetBindingBody

LetBindingBody:
  Pattern[+Alias, +Or] `:` `type` LidentList? `.` TypeExpression[+Es6Arrow, +Alias] `=` Expr[~TTB, ~When]
  Pattern[+Alias, +Or] `:` PolyTypeExpression `=` Expr[~TTB, ~When]
  Pattern[+Alias, +Or] `:` PolyTypeExpression `=` Expr[~TTB, ~When] `:>` TypeExpression[+Es6Arrow, +Alias]
  Pattern[+Alias, +Or] `=` Expr[~TTB, ~When]
  Pattern[+Alias, +Or] `=` Expr[~TTB, ~When] `:>` TypeExpression[+Es6Arrow, +Alias]

LidentList:
  Lident
  Lident LidentList
  
ModuleOrModuleTypeImplOrPackExpression :
  `module` `type` ModuleTypeImpl
  `module` FirstClassModuleExpr
  `module` MaybeRecModuleBinding

ModuleTypeImpl :
  Ident `=` ModuleType[+Es6Arrow, +With]

FirstClassModuleExpr :
  `(` ModuleExpr `)`
  `(` ModuleExpr `:` PackageTypeWithAttr `)`

//[rec] <Uident> [:<ModuleType>] = <ModuleExpr>
MaybeRecModuleBinding :
  [empty]

TypeAlias :
  `as` TypeLVar

TypeEquationOrConstrDecl :
  ValuePath TypeConstructorArgs? TypeAlias?
  Uident ConstrDeclArgs TypeConstructorDeclarations
  Uident ConstrDeclArgs `|` TypeConstructorDeclarations

Comma ::
  `,`

ConstrDeclArgs :
  [empty]
  CoverParenthesizedTypeExpressions
  `(` RecordOrObjectType Comma? TypeExpressions? `)`
  `(` `{` `...` TypeExpression[+Es6Arrow, +Alias] Comma StringFieldDeclarations? `}` TypeAlias? ArrowTypeRest[+Es6Arrow] Comma? TypeExpressions? `)`
  `(` `{` AttributedStringFieldDeclarations `}` Comma? `)` TypeAlias? ArrowTypeRest[+Es6Arrow]
  `(` `{` AttributedFieldDeclarations `}` Comma? `)`
  ConstrDeclArgs `:` TypeExpression[+Es6Arrow, +Alias]

TypeConstructorDeclarations :
  TypeConstructorDeclaration
  TypeConstructorDeclaration `|` TypeConstructorDeclarations

RecordOrObjectDecl :
  RecordOrObjectType TypeAlias? ArrowTypeRest[+Es6Arrow]
  `{` `...` TypeExpression[+Es6Arrow, +Alias] Comma StringFieldDeclarations? `}` TypeAlias? ArrowTypeRest[+Es6Arrow]
  `{` AttributedStringFieldDeclarations `}` Comma? TypeAlias? ArrowTypeRest[+Es6Arrow]
  `{` AttributedFieldDeclarations `}`

TypeConstructorDeclaration :
  Uident ConstrDeclArgs
  Attribute TypeConstructorDeclaration

TypeRepresentation[Private] :
  `|` TypeConstructorDeclarations
  `..`
  TypeConstructorDeclarations
  [+Private] `private` TypeRepresentation[~Private]

TypeExtension :
  `type` `rec` TypeExtensionLHS `+=` `private` ConstrDefinitions
  `type` `rec` TypeExtensionLHS `+=` ConstrDefinitions
  `type` NonRecFlag? TypeExtensionLHS `+=` `private` ConstrDefinitions
  `type` NonRecFlag? TypeExtensionLHS `+=` ConstrDefinitions

TypeExtensionLHS :
  ValuePath AngleBraketTypeParams?

ConstrDefinitions :
  ConstrDefinition[+Attr]
  `|` ConstrDefinition[+Attr]
  ConstrDefinitions `|` ConstrDefinition[+Attr]

ConstrDefinition[Attr] :
  Uident ConstrDeclArgs
  Uident `=` ModulePath
  Uident `:` TypeExpression[+Es6Arrow, +Alias]
  [+Attr] Attribute ConstrDefinition[+Attr]

External :
  `external` Lident `:` TypeExpression[+Es6Arrow, +Alias] `=` String

ExceptionDefinition :
  `exception` ConstrDefinition[~Attr]

OpenDescription :
  `open` ModulePath
  `open` `!` ModulePath

IncludeModuleType :
  `include` ModuleType[+Es6Arrow, +With]

  //`module` ModuleDeclarationOrAlias
  //`module` RecModuleSpec
ModuleSpecification :
  `module` ModuleTypeDeclaration

ModuleDeclarationOrAlias :
  [empty]

RecModuleSpec :
  [empty]

ModuleTypeDeclaration :
  `type` Ident
  `type` Ident `=` ModuleType[+Es6Arrow, +With]

StandaloneAttribute :
  `@@` AttributeId
  `@@` AttributeId Payload

ExtensionModuleLevel :
  `%%` AttributeId
  `%%` AttributeId Payload

Ident :
  Uident
  Lident

SignLetDescription :
  `let` Lident `:` PolyTypeExpression

PolyTypeExpression :
  TypeExpression[+Es6Arrow, +Alias]
  TypeLVars `.` TypeExpression[+Es6Arrow, +Alias]
  TypeLVar `=>` TypeExpression[+Es6Arrow, ~Alias]

TypeVar :
  TypeLVar
  TypeUVar

TypeLVar :
  `'` Lident

TypeUVar :
  `'` Uident

TypeLVars :
  TypeLVar
  TypeLVar TypeLVars

TypeExpression[Es6Arrow, Alias] :
  [+Es6Arrow] Es6ArrowType
  [+Es6Arrow] AtomicTypeExpression `=>` TypeExpression[+Es6Arrow, ~Alias]
  AtomicTypeExpression
  [+Alias] TypeExpression[?Es6Arrow, ?Alias] TypeAlias
  Attribute TypeExpression[?Es6Arrow, ?Alias]

Es6ArrowType :
  [empty]
  Es6ArrowLHS ArrowTypeRest[+Es6Arrow]

Es6ArrowLHS :
  LabelledLident `:` TypeExpression[~Es6Arrow, ~Alias]
  LabelledLident `:` TypeExpression[~Es6Arrow, ~Alias] `=` `?`

CoverParenthesizedTypeParameters :
  `(` `)`
  `(` TypeParameters `)`

AngleBraketTypeParams :
  `<` `>`
  `<` TypeParams `>`

TypeParameters :
  TypeParameter Comma?
  TypeParameter Comma TypeParameters

TypeParams :
  TypeParam Comma?
  TypeParam Comma TypeParams
  
TypeParameter :
  TypeExpression[+Es6Arrow, +Alias]
  LabelledLident `:` TypeExpression[+Es6Arrow, ~Alias]
  LabelledLident `:` TypeExpression[+Es6Arrow, ~Alias] `=` `?`
  Lident TypeConstructorArgs? ArrowTypeRest[+Es6Arrow]
  `.` TypeParameter
  Attribute TypeParameter

Variance :
  [empty]
  `+`
  `-`

TypeParam :
  Variance TypeVar
  Variance `_`

//TODO: Replace this
ArrowTypeRest[Es6Arrow] :
  [empty]
  [+Es6Arrow] `=>` TypeExpression[+Es6Arrow, ~Alias]

TypeConstructorArgs :
  `<` `>`
  `<` TypeExpressions `>`

// TODO
AtomicTypeExpression :
  TypeVar
  `_`
  CoverParenthesizedTypeExpressions
  PolymorphicVariantType
  ValuePath TypeConstructorArgs?
  `module` `(` PackageType `)`
  Extension
  RecordOrObjectType

CoverParenthesizedTypeExpressions :
  `(` `)`
  `(` TypeExpressions `)`

TypeExpressions :
  TypeExpression[+Es6Arrow, +Alias]
  TypeExpression[+Es6Arrow, +Alias] Comma TypeExpressions 

AttributedStringFieldDeclarations :
  StringFieldDeclarations
  Attribute StringFieldDeclarations

StringFieldDeclarations :
  StringFieldDeclaration
  StringFieldDeclaration Comma StringFieldDeclarations

AttributedFieldDeclarations :
  FieldDeclarations
  Attribute FieldDeclarations

FieldDeclarations :
  FieldDeclaration
  FieldDeclaration Comma FieldDeclarations

OptionalLabel :
  `?`

FieldDeclaration :
  Lident OptionalLabel?
  Lident OptionalLabel? `:` PolyTypeExpression
  `mutable` Lident OptionalLabel?
  `mutable` Lident OptionalLabel? `:` PolyTypeExpression
  Attribute FieldDeclaration

StringFieldDeclaration :
  String `:` PolyTypeExpression
  `...` TypeExpression[+Es6Arrow, +Alias]
  Attribute StringFieldDeclaration

OpenFlag :
  `..`

ClosedFlag :
  `.`

RecordOrObjectType :
  OpenRecordOrObjectType
  ClosedRecordOrObjectType

OpenRecordOrObjectType :
  `{` OpenFlag `}`
  `{` OpenFlag StringFieldDeclarations `}`

ClosedRecordOrObjectType :
  `{` ClosedFlag? `}`
  `{` ClosedFlag? StringFieldDeclarations `}`

PolymorphicVariantType :
  `[` `>` TagSpec? TagSpecs? `]`
  `[` `<` TagSpecFull TagSpecFulls? TagNames? `]`
  `[` `<` `|` TagSpecFull TagSpecFulls? TagNames? `]`
  `[` TagSpecFirst TagSpecs? `]`

TagSpec :
  PolymorphicVariantTypeSpecHash[~Full]
  TypeExpression[+Es6Arrow, +Alias]
  Attribute TagSpec

TagSpecFull :
  PolymorphicVariantTypeSpecHash[+Full]
  TypeExpression[+Es6Arrow, +Alias]
  Attribute TagSpecFull

TagSpecFirst :
  `|` TagSpec
  PolymorphicVariantTypeSpecHash[~Full]
  TypeExpression[+Es6Arrow, +Alias]
  Attribute TagSpecFirst

PolymorphicVariantTypeSpecHash[Full] :
  HashIdent
  PolymorphicVariantTypeSpecHash[?Full] PolymorphicVariantTypeArgs
  [+Full] PolymorphicVariantTypeSpecHash[?Full] `&` PolymorphicVariantTypeArgs

PolymorphicVariantTypeArgs :
  CoverParenthesizedTypeExpressions

HashIdent :
  `#` Ident
  `#` Integer[~Suffix]

TagNames :
  `>`
  TagNames TagName

TagName :
  HashIdent

TagSpecs :
  `|` TagSpec
  TagSpecs `|` TagSpec

TagSpecFulls :
  `|` TagSpecFull
  TagSpecFulls `|` TagSpecFull

Attribute :
  `@` AttributeId
  `@` AttributeId Payload

AttributeId :
  AttributeIdElem
  AttributeIdElem `.` AttributeId

AttributeIdElem :
  Keyword
  Ident

Payload :
  `(` `)`
  `(` `:` `)`
  `(` `:` Specifications `)`
  `(` `:` TypeExpression[+Es6Arrow, +Alias] `)`
  `(` `?` Pattern[+Alias, +Or] `)`
  `(` `?` Pattern[+Alias, +Or] `when` Expr[~TTB, ~When] `)`
  `(` `?` Pattern[+Alias, +Or] `if` Expr[~TTB, ~When] `)`
  `(` Implementations `)`

PatternGuard :
  [empty] 
  `when` Expr[~TTB, +When]
  `if` Expr[~TTB, +When]

Pattern[Alias, Or] :
  `true`
  `false`
  Constant
  Interval
  TemplateConstant
  TuplePattern
  ArrayPattern
  RecordPattern
  `_`
  Lident
  Lident TemplateConstant
  ModulePath ConstructorPatternArgs?
  TagName
  `#...` ValuePath
  HashIdent
  `exception` Pattern[~Alias, ~Or]
  `lazy` Pattern[~Alias, ~Or]
  `list{` ListPattern
  `module` ModulePattern
  Extension
  Attribute Pattern[?Alias, ?Or]
  [+Alias] Pattern[?Alias, ?Or] Alias
  [+Or] Pattern[?Alias, ?Or] `|` Pattern[?Alias, ~Or]

Alias :
  `as` Lident

//TODO : String, Codepoint, +-
Constant :
  Integer[+Suffix]
  `+` Integer[+Suffix]
  `-` Integer[+Suffix]
  Float[+Suffix]
  `+` Float[+Suffix]
  `-` Float[+Suffix]
  String

Interval :
  Constant `..` Constant

//TODO
TemplateConstant :
  [empty]

ConstrainedPatterns :
  ConstrainedPattern
  ConstrainedPattern Comma ConstrainedPatterns

RecordPatternRows :
  RecordPatternRow
  RecordPatternRow Comma RecordPatternRows

TuplePattern :
  `(` `)`
  `(` ConstrainedPatterns `)`

ArrayPattern :
  `[` `]`
  `[` ConstrainedPatterns `]`

RecordPattern :
  `{` `}`
  `{` RecordPatternRows `}`

ConstructorPatternArgs :
  `(``)`
  `(` ConstrainedPatterns `)`

ListPattern :
  ConstrainedPatterns? `}`
  ConstrainedPatterns SpreadPattern `}`

SpreadPattern :
  `...` ConstrainedPattern

ModulePattern :
  `(` `)`
  `(` Uident `)`
  `(` Uident `:` PackageTypeWithAttr `)`

ModuleType[Es6Arrow, With] :
  [+Es6Arrow] FunctorModuleType
  AtomicModuleType ArrowTypeRest[?Es6Arrow]
  Attribute ModuleType[?Es6Arrow, ?With]
  [+With] ModuleType WithConstraints

WithConstraints :
  `with` WithConstraint
  WithConstraints `and` WithConstraint

WithConstraint :
  `module` ModulePath `:=` ModulePath
  `module` ModulePath `=` ModulePath
  `type` ValuePath AngleBraketTypeParams? `:=` TypeExpression[+Es6Arrow, +Alias]
  `type` ValuePath AngleBraketTypeParams? `=` TypeExpression[+Es6Arrow, +Alias] TypeConstraints?

ArrowTypeRest[Es6Arrow] :
  [empty]
  [+Es6Arrow] `=>` ModuleType[+Es6Arrow, ~With]

FunctorModuleType :
  `(` FunctorArgs? `)` `=>` ModuleType[+Es6Arrow, +With]
  Attribute FunctorModuleType

FunctorArgs :
  FunctorArg
  FunctorArg FunctorArgs
  
FunctorArg :
  Uident `:` ModuleType[+Es6Arrow, +With]
  ModulePath
  `_` `:` ModuleType[+Es6Arrow, +With]
  `(` `)`
  Attribute FunctorArg

AtomicModuleType :
  ModuleOrValuePath
  `(` ModuleType[+Es6Arrow, +With] `)`
  `{` Specifications `}`
  `module` `type` `of` ModuleExpr
  Extension

ModuleExpr :
  FunctorModuleExpr
  PrimaryModExpr
  Attribute ModuleExpr

FunctorModuleExpr :
  [empty]

PrimaryModExpr :
  AtomicModuleExpr ModuleApplications?

AtomicModuleExpr :
   ModulePath
   `{` Implementations `}`
   `(`ModuleExpr `)`
   `(`ModuleExpr `:` ModuleType `)`
   `unpack` `(` Expr[~TTB, ~When] `)`
   `unpack` `(` Expr[~TTB, ~When] `:` PackageTypeWithAttr`)`
   Extension

ModuleApplications :
  `(` ModuleApplication? `)`
  `(` ModuleApplication? `)` ModuleApplications

ModuleApplication :
  ConstrainedModExpr
  ConstrainedModExpr Comma ModuleApplication

ConstrainedModExpr :
  ModuleExpr
  ModuleExpr `:` ModuleType[+Es6Arrow, +With]

PackageTypeWithAttr :
  PackageType
  Attribute PackageType

PackageType :
  ModuleOrValuePath
  ModuleOrValuePath `with` PackageConstraints

PackageConstraints :
  PackageConstraint
  PackageConstraint `and` PackageConstraints
  
PackageConstraint :
  `type` ValuePath `=` TypeExpression[+Es6Arrow, +Alias]

Extension :
  `%` AttributeId
  `%` AttributeId Payload

ConstrainedPattern :
  Pattern[+Alias, +Or]
  Pattern[+Alias, +Or] `:` TypeExpression[+Es6Arrow, +Alias]

RecordPatternRow :
  `...` RecordPatternRowField
  RecordPatternRowField
  `?` RecordPatternRowField
  `_`
  Attribute RecordPatternRow

ModuleName :
  Uident

ModulePath :
  ModuleName `.` ModulePath
  ModuleName

ValueName :
  Lident

ValuePath :
  ValueName
  ModulePath `.` ValueName

ModuleOrValuePath :
  ValueName
  ModulePath
  ModulePath `.` ValueName

RecordPatternRowField :
  ValuePath 
  ValuePath `:` `?` Pattern[+Alias, +Or]
  ValuePath `:` Pattern[+Alias, +Or]
